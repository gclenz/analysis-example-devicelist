"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Connectors extends TagoIOModule_1.default {
    async list(query) {
        const result = await this.doRequest({
            path: "/connector/",
            method: "GET",
            params: {
                page: (query === null || query === void 0 ? void 0 : query.page) || 1,
                fields: (query === null || query === void 0 ? void 0 : query.fields) || ["id", "name"],
                filter: (query === null || query === void 0 ? void 0 : query.filter) || {},
                amount: (query === null || query === void 0 ? void 0 : query.amount) || 20,
                orderBy: (query === null || query === void 0 ? void 0 : query.orderBy) ? `${query.orderBy[0]},${query.orderBy[1]}` : "name,asc",
            },
        });
        return result;
    }
    async info(connectorID, noParent = false) {
        const result = await this.doRequest({
            path: `/connector/${connectorID}`,
            method: "GET",
            params: {
                no_parent: noParent,
            },
        });
        return result;
    }
    async create(data) {
        const result = await this.doRequest({
            path: `/connector/`,
            method: "POST",
            body: Object.assign({}, data),
        });
        return result;
    }
    async edit(connectorID, data) {
        const result = await this.doRequest({
            path: `/connector/${connectorID}`,
            method: "PUT",
            body: Object.assign({}, data),
        });
        return result;
    }
    async delete(connectorID) {
        const result = await this.doRequest({
            path: `/connector/${connectorID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Retrieves a list of all tokens
     * @example
     * Default: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param connectorID Connector ID
     * @param query Search query params
     */
    tokenList(connectorID, query) {
        const result = this.doRequest({
            path: `/connector/token/${connectorID}`,
            method: "GET",
            params: {
                page: (query === null || query === void 0 ? void 0 : query.page) || 1,
                fields: (query === null || query === void 0 ? void 0 : query.fields) || ["name", "token", "permission"],
                filter: (query === null || query === void 0 ? void 0 : query.filter) || {},
                amount: (query === null || query === void 0 ? void 0 : query.amount) || 20,
                orderBy: (query === null || query === void 0 ? void 0 : query.orderBy) ? `${query.orderBy[0]},${query.orderBy[1]}` : "created_at,desc",
            },
        });
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param connectorID Connector ID
     * @param tokenParams Details of new token
     */
    tokenCreate(connectorID, tokenParams) {
        const result = this.doRequest({
            path: `/connector/token`,
            method: "POST",
            body: Object.assign({ connector: connectorID }, tokenParams),
        });
        return result;
    }
    /**
     * Deletes a token
     * @param token Token ID
     */
    tokenDelete(token) {
        const result = this.doRequest({
            path: `/connector/token/${token}`,
            method: "DELETE",
        });
        return result;
    }
}
exports.default = Connectors;
//# sourceMappingURL=Connector.js.map