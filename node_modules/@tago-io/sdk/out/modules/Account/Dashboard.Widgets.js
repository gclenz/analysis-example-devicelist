"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Widgets extends TagoIOModule_1.default {
    // TODO
    async create(dashboardID, data) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/widget/`,
            method: "POST",
            body: data,
        });
        return result;
    }
    async edit(dashboardID, widgetID, data) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/widget/${widgetID}`,
            method: "PUT",
            body: data,
        });
        return result;
    }
    async delete(dashboardID, widgetID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/widget/${widgetID}`,
            method: "DELETE",
        });
        return result;
    }
    async info(dashboardID, widgetID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/widget/${widgetID}`,
            method: "GET",
        });
        return result;
    }
    // TODO
    async getData(dashboardID, widgetID) {
        const result = await this.doRequest({
            path: `/data/${dashboardID}/${widgetID}`,
            method: "GET",
        });
        return result;
    }
    async sendData(dashboardID, widgetID, data, bypassBucket = false) {
        const result = await this.doRequest({
            path: `/data/${dashboardID}/${widgetID}`,
            method: "POST",
            params: {
                bypass_bucket: bypassBucket,
            },
            body: data,
        });
        return result;
    }
    async runAnalysis(dashboardID, widgetID, data) {
        const result = await this.doRequest({
            path: `/data/${dashboardID}/${widgetID}/run`,
            method: "POST",
            body: data,
        });
        return result;
    }
    async deleteData(dashboardID, widgetID, ids) {
        const result = await this.doRequest({
            path: `/data/${dashboardID}/${widgetID}`,
            method: "DELETE",
            params: {
                ids,
            },
        });
        return result;
    }
    async tokenGenerate(dashboardID, widgetID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/widget/${widgetID}/token`,
            method: "GET",
        });
        return result;
    }
}
exports.default = Widgets;
//# sourceMappingURL=Dashboard.Widgets.js.map