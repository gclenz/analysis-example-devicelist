"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const Dashboard_Widgets_1 = __importDefault(require("./Dashboard.Widgets"));
const _Share_1 = __importDefault(require("./_Share"));
class Dashboards extends TagoIOModule_1.default {
    constructor() {
        super(...arguments);
        this.share = new _Share_1.default(Object.assign(Object.assign({}, this.params), { type: "dashboard" }));
        // TODO dashboard id on constructor
        this.widgets = new Dashboard_Widgets_1.default(this.params);
    }
    async list(query) {
        const result = await this.doRequest({
            path: "/dashboard",
            method: "GET",
            params: {
                page: (query === null || query === void 0 ? void 0 : query.page) || 1,
                fields: (query === null || query === void 0 ? void 0 : query.fields) || ["id", "name"],
                filter: (query === null || query === void 0 ? void 0 : query.filter) || {},
                amount: (query === null || query === void 0 ? void 0 : query.amount) || 20,
                orderBy: (query === null || query === void 0 ? void 0 : query.orderBy) ? `${query.orderBy[0]},${query.orderBy[1]}` : "label,asc",
            },
        });
        return result;
    }
    async create(data) {
        const result = await this.doRequest({
            path: "/dashboard",
            method: "POST",
            body: Object.assign({}, data),
        });
        return result;
    }
    async edit(dashboardID, data) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}`,
            method: "PUT",
            body: Object.assign({}, data),
        });
        return result;
    }
    async delete(dashboardID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}`,
            method: "DELETE",
        });
        return result;
    }
    async info(dashboardID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}`,
            method: "GET",
        });
        return result;
    }
    async duplicate(dashboardID, data) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/duplicate`,
            method: "POST",
            body: data || {},
        });
        return result;
    }
    async shareList(dashboardID) {
        return this.share.list(dashboardID);
    }
    async shareSendInvite(dashboardID, data) {
        return this.share.invite(dashboardID, data);
    }
    async shareEdit(dashboardID, data) {
        return this.share.edit(dashboardID, data);
    }
    async shareDelete(dashboardID) {
        return this.share.remove(dashboardID);
    }
    async getPublicKey(dashboardID, expireTime = "never") {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/share/public`,
            method: "GET",
            params: {
                expire_time: expireTime,
            },
        });
        return result;
    }
    async listDevicesRelated(dashboardID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/devices`,
            method: "GET",
        });
        return result;
    }
    // TODO test
    async runWidgetHeaderButtonAnalysis(analysisID, dashboardID, widgetID, 
    // TODO
    scope) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/run/${dashboardID}/${widgetID}`,
            method: "POST",
        });
        return result;
    }
}
exports.default = Dashboards;
//# sourceMappingURL=Dashboards.js.map