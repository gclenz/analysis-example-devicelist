import { ExpireTimeOption, GenericID } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { InviteInfo, InviteResponse } from "./_share.types";
import Widgets from "./Dashboard.Widgets";
import { DashboardCreateInfo, DashboardInfo, DashboardQuery, DevicesRelated, PublicKeyResponse } from "./dashboards.types";
declare class Dashboards extends TagoIOModule<GenericModuleParams> {
    private share;
    list(query?: DashboardQuery): Promise<DashboardInfo[]>;
    create(data: DashboardCreateInfo): Promise<{
        dashboard: GenericID;
    }>;
    edit(dashboardID: GenericID, data: Partial<DashboardInfo>): Promise<string>;
    delete(dashboardID: GenericID): Promise<string>;
    info(dashboardID: GenericID): Promise<DashboardInfo>;
    duplicate(dashboardID: GenericID, data?: {
        setup?: object;
        new_label?: string;
    }): Promise<{
        dashboard_id: string;
        message: string;
    }>;
    shareList(dashboardID: GenericID): Promise<InviteInfo[]>;
    shareSendInvite(dashboardID: GenericID, data: InviteInfo): Promise<InviteResponse>;
    shareEdit(dashboardID: GenericID, data: Partial<InviteInfo>): Promise<string>;
    shareDelete(dashboardID: GenericID): Promise<string>;
    getPublicKey(dashboardID: GenericID, expireTime?: ExpireTimeOption): Promise<PublicKeyResponse>;
    listDevicesRelated(dashboardID: GenericID): Promise<DevicesRelated[]>;
    runWidgetHeaderButtonAnalysis(analysisID: GenericID, dashboardID: GenericID, widgetID: GenericID, scope?: object): Promise<string>;
    widgets: Widgets;
}
export default Dashboards;
//# sourceMappingURL=Dashboards.d.ts.map