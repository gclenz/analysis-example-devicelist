import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { GenericID, GenericToken } from "../../common/common.types";
interface WidgetInfo {
    analysis_run?: GenericID;
    dashboard?: GenericID;
    display?: object;
    data: object[];
    id?: GenericID;
    label: string;
    realtime?: boolean | null;
    type: string;
}
declare class Widgets extends TagoIOModule<GenericModuleParams> {
    create(dashboardID: GenericID, data: WidgetInfo): Promise<any>;
    edit(dashboardID: GenericID, widgetID: GenericID, data: Partial<WidgetInfo>): Promise<string>;
    delete(dashboardID: GenericID, widgetID: GenericID): Promise<string>;
    info(dashboardID: GenericID, widgetID: GenericID): Promise<WidgetInfo>;
    getData(dashboardID: GenericID, widgetID: GenericID): Promise<object>;
    sendData(dashboardID: GenericID, widgetID: GenericID, data: object, bypassBucket?: boolean): Promise<object>;
    runAnalysis(dashboardID: GenericID, widgetID: GenericID, data: object): Promise<object>;
    deleteData(dashboardID: GenericID, widgetID: GenericID, ids: GenericID): Promise<string>;
    tokenGenerate(dashboardID: GenericID, widgetID: GenericID): Promise<{
        widget_token: GenericToken;
    }>;
}
export default Widgets;
//# sourceMappingURL=Dashboard.Widgets.d.ts.map