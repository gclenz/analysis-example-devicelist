import { GenericID, GenericToken, ListTokenQuery, TokenCreateResponse, TokenData } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { ConnectorCreateInfo, ConnectorInfo, ConnectorQuery, ConnectorTokenInfo } from "./connector.types";
declare class Connectors extends TagoIOModule<GenericModuleParams> {
    list(query?: ConnectorQuery): Promise<ConnectorInfo[]>;
    info(connectorID: GenericID, noParent?: boolean): Promise<ConnectorInfo>;
    create(data: ConnectorCreateInfo): Promise<{
        connector: GenericID;
    }>;
    edit(connectorID: GenericID, data: Partial<ConnectorCreateInfo>): Promise<string>;
    delete(connectorID: GenericID): Promise<string>;
    /**
     * Retrieves a list of all tokens
     * @example
     * Default: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param connectorID Connector ID
     * @param query Search query params
     */
    tokenList(connectorID: GenericID, query?: ListTokenQuery): Promise<Partial<ConnectorTokenInfo>[]>;
    /**
     * Generates and retrieves a new token
     * @param connectorID Connector ID
     * @param tokenParams Details of new token
     */
    tokenCreate(connectorID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse>;
    /**
     * Deletes a token
     * @param token Token ID
     */
    tokenDelete(token: GenericToken): Promise<string>;
}
export default Connectors;
//# sourceMappingURL=Connector.d.ts.map