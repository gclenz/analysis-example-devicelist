"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Devices extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all devices from the account
     * @example
     * Default Query: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     *   resolveBucketName: false
     * }
     * @param query Search query params
     */
    list(query) {
        const result = this.doRequest({
            path: "/device",
            method: "GET",
            params: {
                page: (query === null || query === void 0 ? void 0 : query.page) || 1,
                fields: (query === null || query === void 0 ? void 0 : query.fields) || ["id", "name"],
                filter: (query === null || query === void 0 ? void 0 : query.filter) || {},
                amount: (query === null || query === void 0 ? void 0 : query.amount) || 20,
                orderBy: (query === null || query === void 0 ? void 0 : query.orderBy) ? `${query.orderBy[0]},${query.orderBy[1]}` : "name,asc",
                resolveBucketName: (query === null || query === void 0 ? void 0 : query.resolveBucketName) || false,
            },
        });
        return result;
    }
    /**
     * Create a Device
     * @param createParams Params of new device
     */
    create(createParams) {
        const result = this.doRequest({
            path: "/device",
            method: "POST",
            body: createParams,
        });
        return result;
    }
    /**
     * Edit the Device
     * @param deviceID Device ID
     * @param deviceObject Device object with fields to replace
     */
    edit(deviceID, deviceObject) {
        const result = this.doRequest({
            path: `/device/${deviceID}`,
            method: "PUT",
            body: deviceObject,
        });
        return result;
    }
    /**
     * Delete the Device
     * @param deviceID Device ID
     */
    delete(deviceID) {
        const result = this.doRequest({
            path: `/device/${deviceID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Get Info of the Device
     * @param deviceID Device ID
     */
    info(deviceID) {
        const result = this.doRequest({
            path: `/device/${deviceID}`,
            method: "GET",
        });
        return result;
    }
    /**
     * Create or edit param for the Device
     * @param deviceID Device ID
     * @param data Configuration Data
     * @param paramID Parameter ID
     */
    paramSet(deviceID, data, paramID) {
        const result = this.doRequest({
            path: `/device/${deviceID}/params`,
            method: "POST",
            body: paramID
                ? Object.assign({ id: paramID }, data) : data,
        });
        return result;
    }
    /**
     * List Params for the Device
     * @param deviceID Device ID
     * @param sentStatus True return only sent=true, False return only sent=false
     */
    paramList(deviceID, sentStatus) {
        const result = this.doRequest({
            path: `/device/${deviceID}/params`,
            method: "GET",
            params: { sent_status: sentStatus },
        });
        return result;
    }
    /**
     * Remove param for the Device
     * @param deviceID Device ID
     * @param paramID Parameter ID
     */
    paramRemove(deviceID, paramID) {
        const result = this.doRequest({
            path: `/device/${deviceID}/params/${paramID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Retrieves a list of all tokens
     * @example
     * Default Query: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param deviceID Device ID
     * @param query Search query params
     */
    tokenList(deviceID, query) {
        const result = this.doRequest({
            path: `/device/token/${deviceID}`,
            method: "GET",
            params: {
                page: (query === null || query === void 0 ? void 0 : query.page) || 1,
                fields: (query === null || query === void 0 ? void 0 : query.fields) || ["name", "token", "permission"],
                filter: (query === null || query === void 0 ? void 0 : query.filter) || {},
                amount: (query === null || query === void 0 ? void 0 : query.amount) || 20,
                orderBy: (query === null || query === void 0 ? void 0 : query.orderBy) ? `${query.orderBy[0]},${query.orderBy[1]}` : "created_at,desc",
            },
        });
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param deviceID Device ID
     * @param tokenParams Params for new token
     */
    tokenCreate(deviceID, tokenParams) {
        const result = this.doRequest({
            path: `/device/token`,
            method: "POST",
            body: Object.assign({ device: deviceID }, tokenParams),
        });
        return result;
    }
    /**
     * Delete a token
     * @param token Token
     */
    tokenDelete(token) {
        const result = this.doRequest({
            path: `/device/token/${token}`,
            method: "DELETE",
        });
        return result;
    }
}
exports.default = Devices;
//# sourceMappingURL=Devices.js.map