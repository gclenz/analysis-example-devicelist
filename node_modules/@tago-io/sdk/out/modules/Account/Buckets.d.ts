import { ExportOption, GenericID } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { BucketCreateInfo, BucketDeviceInfo, BucketInfo, BucketQuery, ExportBucket, ExportBucketOption, VariablesInfo } from "./buckets.types";
interface ListVariablesOptions {
    /**
     * return amount of each variable
     */
    showAmount?: boolean;
    /**
     * return array of async deleted
     */
    showDeleted?: boolean;
    /**
     * Change origins to array of object with id and name
     */
    resolveOriginName?: boolean;
}
declare class Buckets extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all buckets from account
     * @example
     * Default: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * @param query Search query params
     */
    list(query?: BucketQuery): Promise<BucketInfo[]>;
    /**
     * Generates and retrieves a new bucket for the account
     * @param createParams Bucket create object
     */
    create(createParams: BucketCreateInfo): Promise<{
        bucket: string;
    }>;
    /**
     * Modifies any property of the bucket.
     * @param bucketID Bucket ID
     * @param bucketObject JSON of bucket to replace
     */
    edit(bucketID: GenericID, bucketObject: Partial<BucketCreateInfo>): Promise<string>;
    /**
     * Deletes a bucket from the account
     * @param bucketID Bucket ID
     */
    delete(bucketID: GenericID): Promise<string>;
    /**
     * Gets information about the bucket
     * @param bucketID Bucket ID
     */
    info(bucketID: GenericID): Promise<BucketInfo>;
    /**
     * Get Amount of data on the Bucket
     * @param bucketID Bucket ID
     */
    amount(bucketID: GenericID): Promise<number>;
    /**
     * List variables inside the bucket
     * @example
     * Options Default: {
     *   showAmount: false
     *   showDeleted: false
     *   resolveOriginName: false
     * }
     * @param bucketID Bucket ID
     * @param options Request options
     */
    listVariables(bucketID: GenericID, options?: ListVariablesOptions): Promise<VariablesInfo[]>;
    /**
     * Delete a bucket variable
     * @param bucketID Bucket ID
     * @param deleteParams Variable Details
     */
    deleteVariable(bucketID: GenericID, deleteParams: {
        variable: string;
        origin: string;
    }): Promise<string>;
    /**
     * Get all device associated with bucket
     * @param bucketID Bucket ID
     */
    getDevicesAssociated(bucketID: GenericID): Promise<BucketDeviceInfo[]>;
    /**
     * Export Data from Bucket
     * @param buckets Array of JSON with get details
     * @param output Type of output
     * @param options Options of request
     */
    exportData(buckets: ExportBucket, output: ExportOption, options?: ExportBucketOption): Promise<string>;
}
export default Buckets;
//# sourceMappingURL=Buckets.d.ts.map