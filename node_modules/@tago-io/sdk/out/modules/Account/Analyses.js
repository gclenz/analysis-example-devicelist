"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Analyses extends TagoIOModule_1.default {
    async list(query) {
        const result = await this.doRequest({
            path: "/analysis/",
            method: "GET",
            params: {
                page: (query === null || query === void 0 ? void 0 : query.page) || 1,
                fields: (query === null || query === void 0 ? void 0 : query.fields) || ["id", "name"],
                filter: (query === null || query === void 0 ? void 0 : query.filter) || {},
                amount: (query === null || query === void 0 ? void 0 : query.amount) || 20,
                orderBy: (query === null || query === void 0 ? void 0 : query.orderBy) ? `${query.orderBy[0]},${query.orderBy[1]}` : "name,asc",
            },
        });
        return result;
    }
    async create(data) {
        const result = await this.doRequest({
            path: `/analysis`,
            method: "POST",
            body: Object.assign({}, data),
        });
        return result;
    }
    async edit(analysisID, data) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}`,
            method: "PUT",
            body: Object.assign({}, data),
        });
        return result;
    }
    async delete(analysisID) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}`,
            method: "DELETE",
        });
        return result;
    }
    async info(analysisID) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}`,
            method: "GET",
        });
        return result;
    }
    async run(analysisID, scope) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/run`,
            method: "POST",
            body: {
                scope,
            },
        });
        return result;
    }
    async tokenGenerate(analysisID) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/token`,
            method: "GET",
        });
        return result;
    }
    async uploadScript(analysisID, file) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/upload`,
            method: "POST",
            body: {
                file: file.content,
                file_name: file.name,
                language: file.language,
            },
        });
        return result;
    }
    async downloadScript(analysisID) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/download`,
            method: "GET",
        });
        return result;
    }
}
exports.default = Analyses;
//# sourceMappingURL=Analyses.js.map