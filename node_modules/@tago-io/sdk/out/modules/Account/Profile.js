"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Profile extends TagoIOModule_1.default {
    async list() {
        const result = await this.doRequest({
            path: "/profile",
            method: "GET",
        });
        return result;
    }
    async info(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "GET",
        });
        return result;
    }
    async create(data) {
        const result = await this.doRequest({
            path: `/profile/`,
            method: "POST",
            body: data,
        });
        return result;
    }
    async edit(profileID, data) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "PUT",
            body: data,
        });
        return result;
    }
    async delete(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "DELETE",
        });
        return result;
    }
    async usageStatisticList(profileID, time) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/statistics`,
            method: "GET",
            params: Object.assign({}, time),
        });
        return result;
    }
    async auditLog(profileID, filter) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/auditlog`,
            method: "GET",
            params: filter || {},
        });
        return result;
    }
    async addonList(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/addons`,
            method: "GET",
        });
        return result;
    }
    async addonEdit(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/addons`,
            method: "POST",
        });
        return result;
    }
    async serviceEdit(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/services`,
            method: "POST",
        });
        return result;
    }
    async transferTokenToAnotherProfile(targetProfileID) {
        const result = await this.doRequest({
            path: `/profile/switch/${targetProfileID}`,
            method: "PUT",
        });
        return result;
    }
    /**
     * Retrieves a list of all tokens
     * @param profileID Profile ID
     * @param query Search query params
     */
    tokenList(profileID, query) {
        const result = this.doRequest({
            path: `/profile/${profileID}/token`,
            method: "GET",
            params: {
                page: (query === null || query === void 0 ? void 0 : query.page) || 1,
                fields: (query === null || query === void 0 ? void 0 : query.fields) || ["name", "token", "permission"],
                filter: (query === null || query === void 0 ? void 0 : query.filter) || {},
                amount: (query === null || query === void 0 ? void 0 : query.amount) || 20,
                orderBy: (query === null || query === void 0 ? void 0 : query.orderBy) ? `${query.orderBy[0]},${query.orderBy[1]}` : "created_at,desc",
            },
        });
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param profileID Profile ID
     * @param tokenParams Token params for new token
     */
    tokenCreate(profileID, tokenParams) {
        const result = this.doRequest({
            path: `/profile/${profileID}/token`,
            method: "POST",
            body: tokenParams,
        });
        return result;
    }
    /**
     * Deletes a token
     * @param token Token
     */
    tokenDelete(token) {
        const result = this.doRequest({
            path: `/profile/token/${token}`,
            method: "DELETE",
        });
        return result;
    }
}
exports.default = Profile;
//# sourceMappingURL=Profile.js.map