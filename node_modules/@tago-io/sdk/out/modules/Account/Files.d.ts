/// <reference types="node" />
import { GenericID } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { Base64File, FileListInfo, FileQuery, FilesPermission, MoveFiles, Options } from "./files.types";
declare class Files extends TagoIOModule<GenericModuleParams> {
    private isCanceled;
    list(query?: FileQuery): Promise<FileListInfo>;
    uploadBase64(data: Base64File[]): Promise<string>;
    move(data: MoveFiles[]): Promise<string>;
    delete(files: string[]): Promise<string>;
    checkPermission(file: string): Promise<{
        public: boolean;
    }>;
    changePermission(files: FilesPermission[]): Promise<string>;
    private getPathFromUrl;
    getFileURLSigned(url: string): Promise<string>;
    getFileMD5(url: string): Promise<string>;
    private createMultipartUpload;
    _uploadPart(filename: string, uploadID: string, partNumber: number, blob: Buffer | Blob, options: Options): Promise<{
        ETag: any;
        PartNumber: number;
    }>;
    _addToQueue(filename: string, uploadID: GenericID, partNumber: number, blob: Buffer | Blob, options: Options): Promise<{
        ETag: any;
        PartNumber: number;
    }>;
    _completeMultipartUpload(filename: string, uploadID: string, parts: any[], options: Options): Promise<void>;
    uploadFile(file: Buffer | Blob, filename: string, options: Options): Promise<void>;
}
export default Files;
//# sourceMappingURL=Files.d.ts.map