import { GenericID, GenericToken, ListTokenQuery, TokenCreateResponse, TokenData, TokenDataList } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { AuditLogFilter, ProfileInfo, ProfileListInfo, UsageStatistic } from "./profile.types";
declare class Profile extends TagoIOModule<GenericModuleParams> {
    list(): Promise<ProfileListInfo[]>;
    info(profileID: GenericID): Promise<ProfileInfo>;
    create(data: {
        name: string;
    }): Promise<{
        id: GenericID;
    }>;
    edit(profileID: GenericID, data: Partial<ProfileInfo>): Promise<string>;
    delete(profileID: GenericID): Promise<string>;
    usageStatisticList(profileID: GenericID, time?: {
        date?: string;
        timezone?: string;
    }): Promise<UsageStatistic[]>;
    auditLog(profileID: GenericID, filter?: AuditLogFilter): Promise<AuditLogFilter>;
    addonList(profileID: GenericID): Promise<object>;
    addonEdit(profileID: GenericID): Promise<object>;
    serviceEdit(profileID: GenericID): Promise<object>;
    transferTokenToAnotherProfile(targetProfileID: GenericID): Promise<object>;
    /**
     * Retrieves a list of all tokens
     * @param profileID Profile ID
     * @param query Search query params
     */
    tokenList(profileID: GenericID, query?: ListTokenQuery): Promise<Partial<TokenDataList>[]>;
    /**
     * Generates and retrieves a new token
     * @param profileID Profile ID
     * @param tokenParams Token params for new token
     */
    tokenCreate(profileID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse>;
    /**
     * Deletes a token
     * @param token Token
     */
    tokenDelete(token: GenericToken): Promise<string>;
}
export default Profile;
//# sourceMappingURL=Profile.d.ts.map