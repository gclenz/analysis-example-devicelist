import TagoIOModule from "../../common/TagoIOModule";
import { Data, GenericID } from "../../common/common.types";
import { DeviceInfo, DeviceConstructorParams, DataToSend, DataQuery } from "./device.types";
import Batch from "../../common/BatchRequest";
declare class Device extends TagoIOModule<DeviceConstructorParams> {
    /**
     * Get information about the current device
     */
    info(): Promise<DeviceInfo>;
    /**
     * Send data to device
     * @param data An array or one object with data to be send to TagoIO using device token
     */
    sendData(data: DataToSend | DataToSend[]): Promise<string>;
    /**
     * Get data from TagoIO Device.
     * @example
     * ```json
     * queryParams: {
     *  query: "last_item",
     *  variable: "humidity",
     * }
     * ```
     * @param queryParams Object with query params
     * @returns An array of TagoIO registers
     */
    getData(queryParams?: DataQuery): Promise<Data[]>;
    /**
     * Delete data from device
     * @example
     * ```json
     * queryParams: {
     *  id: "0f123d2xz"
     * }
     * ```
     * @param queryParams
     */
    deleteData(queryParams?: DataQuery): Promise<string>;
    /**
     * Get parameters from device
     * @param onlyUnRead set true to get only unread parameters
     */
    getParameters(onlyUnRead?: boolean): Promise<string>;
    /**
     * Mark parameter as read
     * @param parameterID Parameter identification
     */
    setParameterAsRead(parameterID: GenericID): Promise<string>;
    batch: Batch;
}
export default Device;
//# sourceMappingURL=Device.d.ts.map